package FrontEnd;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import BackEnd.Select;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Geff
 */
public class transactions_Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form customerDetailsBill
     */
    public transactions_Dashboard() {
        initComponents();
        SimpleDateFormat myDate = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        jTextField1.setText(myDate.format(cal.getTime()));

    }

private void printReceipt(String date, double dailyTotal) {
    String fileSafeDate = date.replace("-", "").replace(" to ", "_");
    String path = "C:\\Users\\Geff\\Desktop\\Test\\" + fileSafeDate + ".pdf";
    com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
    Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
    Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);

    try {
        PdfWriter.getInstance(doc, new FileOutputStream(path));
        doc.open();

        // Header
        Paragraph header = new Paragraph("DAILY SALES RECEIPT", titleFont);
        header.setAlignment(Element.ALIGN_CENTER);
        doc.add(header);

        Paragraph datePara = new Paragraph("Date: " + date);
        datePara.setAlignment(Element.ALIGN_CENTER);
        doc.add(datePara);

        doc.add(new Paragraph(" ")); // Empty line

        // Table setup
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        table.addCell(new Phrase("Product", boldFont));
        table.addCell(new Phrase("Quantity", boldFont));
        table.addCell(new Phrase("Payment Mode", boldFont));
        table.addCell(new Phrase("Amount", boldFont));

        // Detect if date is a range
        String query;
        if (date.contains(" to ")) {
            String[] parts = date.split(" to ");
            String startDate = parts[0];
            String endDate = parts[1];
            query = "SELECT p.name as productName, s.quantityBought, " +
                    "s.paymentMode, s.totalSales FROM sales s " +
                    "JOIN products p ON s.productId = p.productId " +
                    "WHERE s.purchaseDate BETWEEN '" + startDate + "' AND '" + endDate + "'";
        } else {
            query = "SELECT p.name as productName, s.quantityBought, " +
                    "s.paymentMode, s.totalSales FROM sales s " +
                    "JOIN products p ON s.productId = p.productId " +
                    "WHERE s.purchaseDate = '" + date + "'";
        }

        ResultSet rs = Select.getData(query);

        while (rs.next()) {
            table.addCell(rs.getString("productName"));
            table.addCell(rs.getString("quantityBought"));
            table.addCell(rs.getString("paymentMode"));
            table.addCell(rs.getString("totalSales"));
        }

        doc.add(table);

        Paragraph total = new Paragraph("TOTAL SALES: " + String.format("%.2f", dailyTotal), boldFont);
        total.setAlignment(Element.ALIGN_RIGHT);
        doc.add(total);

        doc.add(new Paragraph(" "));
        Paragraph footer = new Paragraph("Thank you for supporting our small business!", boldFont);
        footer.setAlignment(Element.ALIGN_CENTER);
        doc.add(footer);

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error generating receipt: " + e.getMessage());
    } finally {
        doc.close();
    }

    // Open the PDF
    try {
        File receiptFile = new File(path);
        if (receiptFile.exists()) {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + receiptFile.getAbsolutePath());
        } else {
            JOptionPane.showMessageDialog(null, "Receipt file could not be created.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error opening receipt: " + e.getMessage());
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        home = new javax.swing.JLabel();
        logout = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setUndecorated(true);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(1366, 768));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction Number", "Buyer Name", "Purchase Date", "Product Batch", "Quantity Bought", "Payment Mode", "Sales (â‚±)"
            }
        ));
        mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mainTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 1260, 400));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 190, 50));

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 210, -1, 30));

        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeMouseClicked(evt);
            }
        });
        jPanel1.add(home, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 80, 60, 60));

        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
        });
        jPanel1.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 90, 90, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/transactions.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 768));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
    DefaultTableModel model = (DefaultTableModel) mainTable.getModel();
    model.setRowCount(0); // Clear existing rows
    
    // Select all sales data
    ResultSet rs = Select.getData("SELECT saleId, buyerName, purchaseDate, productId, quantityBought, paymentMode, totalSales FROM sales");
    
    try {
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("saleId"),
                rs.getString("buyerName"),
                rs.getString("purchaseDate"),
                rs.getString("productId"),
                rs.getString("quantityBought"),
                rs.getString("paymentMode"),
                rs.getString("totalSales")
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error loading sales data: " + e.getMessage());
    } finally {
        try { if (rs != null) rs.close(); } catch (SQLException e) {}
    }
    }//GEN-LAST:event_formComponentHidden

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String input = jTextField1.getText().trim().toLowerCase();
    String startDate = "";
    String endDate = "";

    Calendar cal = Calendar.getInstance();
    int year = cal.get(Calendar.YEAR);

    // Handle "January", "February" input
    if (input.equalsIgnoreCase("january") || input.equalsIgnoreCase("february") || input.equalsIgnoreCase("march")
        || input.equalsIgnoreCase("april") || input.equalsIgnoreCase("may") || input.equalsIgnoreCase("june")
        || input.equalsIgnoreCase("july") || input.equalsIgnoreCase("august") || input.equalsIgnoreCase("september")
        || input.equalsIgnoreCase("october") || input.equalsIgnoreCase("november") || input.equalsIgnoreCase("december")) {
        
        // Convert the month name to month number
        int monthNum = getMonthNumber(input);
        
        // Set start and end date for the whole month
        startDate = String.format("%d-%02d-01", year, monthNum);
        cal.set(Calendar.MONTH, monthNum - 1);
        int lastDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
        endDate = String.format("%d-%02d-%02d", year, monthNum, lastDay);

        // Update text field
        jTextField1.setText(input + " â†’ " + startDate + " to " + endDate);
    }
    // Handle direct date input (yyyy-MM-dd)
    else if (input.matches("\\d{4}-\\d{2}-\\d{2}")) {
        startDate = input;
        endDate = input;
    } 
    else {
        JOptionPane.showMessageDialog(null, "Invalid input. Use YYYY-MM-DD or month name (e.g., January, February).");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) mainTable.getModel();
    model.setRowCount(0); // Clear table

    try {
        ResultSet rs = Select.getData("SELECT s.saleId, s.buyerName, s.purchaseDate, p.name as productName, " +
                                      "s.quantityBought, s.paymentMode, s.totalSales " +
                                      "FROM sales s JOIN products p ON s.productId = p.productId " +
                                      "WHERE s.purchaseDate BETWEEN '" + startDate + "' AND '" + endDate + "'");

        boolean found = false;
        double totalSales = 0;

        while (rs.next()) {
            found = true;
            totalSales += rs.getDouble("totalSales");
            model.addRow(new Object[]{
                rs.getString("saleId"),
                rs.getString("buyerName"),
                rs.getString("purchaseDate"),
                rs.getString("productName"),
                rs.getString("quantityBought"),
                rs.getString("paymentMode"),
                rs.getString("totalSales")
            });
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "No sales found in the date " + input);
            return;
        }

        model.addRow(new Object[]{"", "TOTAL SALES:", "", "", "", "", String.format("%.2f", totalSales)});

        int option = JOptionPane.showConfirmDialog(null, 
            "Print receipt for sales from " + startDate + " to " + endDate + "?\nTotal Sales: " + totalSales,
            "Print Receipt", 
            JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            printReceipt(startDate + (startDate.equals(endDate) ? "" : " to " + endDate), totalSales);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error retrieving sales: " + e.getMessage());
    }
}

// Helper method to convert month name to month number
private int getMonthNumber(String monthName) {
    switch (monthName.toLowerCase()) {
        case "january": return 1;
        case "february": return 2;
        case "march": return 3;
        case "april": return 4;
        case "may": return 5;
        case "june": return 6;
        case "july": return 7;
        case "august": return 8;
        case "september": return 9;
        case "october": return 10;
        case "november": return 11;
        case "december": return 12;
        default: return -1; // Invalid month
    }



//    String dateString = jTextField1.getText().trim();
//    
//    if (dateString.isEmpty()) {
//        JOptionPane.showMessageDialog(null, "Please enter a date (YYYY-MM-DD)");
//        return;
//    }
//
//    // Validate date format
//    if (!dateString.matches("\\d{4}-\\d{2}-\\d{2}")) {
//        JOptionPane.showMessageDialog(null, "Please enter date in YYYY-MM-DD format");
//        return;
//    }
//
//    DefaultTableModel model = (DefaultTableModel) mainTable.getModel();
//    model.setRowCount(0); // Clear existing rows
//    
//    try {
//        // Get all sales for the specified date
//        ResultSet rs = Select.getData("SELECT s.saleId, s.buyerName, s.purchaseDate, p.name as productName, " +
//                                     "s.quantityBought, s.paymentMode, s.totalSales " +
//                                     "FROM sales s JOIN products p ON s.productId = p.productId " +
//                                     "WHERE s.purchaseDate = '" + dateString + "'");
//        
//        boolean found = false;
//        double dailyTotal = 0;
//        
//        while (rs.next()) {
//            found = true;
//            dailyTotal += rs.getDouble("totalSales");
//            model.addRow(new Object[]{
//                rs.getString("saleId"),
//                rs.getString("buyerName"),
//                rs.getString("purchaseDate"),
//                rs.getString("productName"), // Now showing product name instead of ID
//                rs.getString("quantityBought"),
//                rs.getString("paymentMode"),
//                rs.getString("totalSales")
//            });
//        }
//        
//        if (!found) {
//            JOptionPane.showMessageDialog(null, "No sales found for date: " + dateString);
//            return;
//        }
//        
//        // Add daily total row
//        model.addRow(new Object[]{"", "DAILY TOTAL:", "", "", "", "", dailyTotal});
//        
//        // Ask if user wants to print receipt
//        int option = JOptionPane.showConfirmDialog(null, 
//            "Print receipt for sales on " + dateString + "?\nTotal Sales: " + dailyTotal, 
//            "Print Receipt", 
//            JOptionPane.YES_NO_OPTION);
//        
//        if (option == JOptionPane.YES_OPTION) {
//            printReceipt(dateString, dailyTotal);
//        }
//        
//    } catch (Exception e) {
//        JOptionPane.showMessageDialog(null, "Error searching sales: " + e.getMessage());
//    }
    
    //String dateString = jTextField1.getText().trim();
//    
//    if (dateString.isEmpty()) {
//        JOptionPane.showMessageDialog(null, "Please enter a date (YYYY-MM-DD)");
//        return;
//    }
//
//    // Validate date format (basic validation)
//    if (!dateString.matches("\\d{4}/\\d{2}/\\d{2}")) {
//        JOptionPane.showMessageDialog(null, "Please enter date in YYYY-MM-DD format");
//        return;
//    }
//
//    DefaultTableModel model = (DefaultTableModel) mainTable.getModel();
//    model.setRowCount(0); // Clear existing rows
//    
//    try {
//        // Search by date instead of saleId
//        ResultSet rs = Select.getData("SELECT saleId, buyerName, purchaseDate, productId, quantityBought, paymentMode, totalSales " +
//                                     "FROM sales WHERE purchaseDate = '" + dateString + "'");
//        
//        boolean found = false;
//        while (rs.next()) {
//            found = true;
//            model.addRow(new Object[]{
//                rs.getString("saleId"),
//                rs.getString("buyerName"),
//                rs.getString("purchaseDate"),
//                rs.getString("productId"),
//                rs.getString("quantityBought"),
//                rs.getString("paymentMode"),
//                rs.getString("totalSales")
//            });
//        }
//        
//        if (!found) {
//            JOptionPane.showMessageDialog(null, "No sales found for date: " + dateString);
//        }
//    } catch (Exception e) {
//        JOptionPane.showMessageDialog(null, "Error searching sales: " + e.getMessage());
//    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void mainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainTableMouseClicked
//        int index = mainTable.getSelectedRow();
//        TableModel model = mainTable.getModel();
//        String id = model.getValueAt(index, 0).toString();
//        try {
//            if ((new File("C:\\Users\\Geff\\Desktop" + id + ".pdf")).exists()) {
//                Process p = Runtime
//                        .getRuntime()
//                        .exec("rundll32 url.dll,FileProtocolHandler C:\\Users\\Geff\\Desktop" + id + ".pdf");
//            } else {
//                System.out.println("File Doesn't Exists");
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "No Records Found");
//        }
    }//GEN-LAST:event_mainTableMouseClicked

    private void homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseClicked
        int a=JOptionPane.showConfirmDialog(null, "Back to Home?", "Select",JOptionPane.YES_NO_CANCEL_OPTION);
        if (a==0){
            dispose();
            new home_Dashboard().setVisible(true);
        }   
    }//GEN-LAST:event_homeMouseClicked

    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseClicked
        int a=JOptionPane.showConfirmDialog(null, "Do you really want to Logout?", "Select",JOptionPane.YES_NO_CANCEL_OPTION);
        if (a==0){
            setVisible(false);
            new loginPage_Dashboard().setVisible(true);
        }
    }//GEN-LAST:event_logoutMouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(transactions_Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(transactions_Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(transactions_Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(transactions_Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new transactions_Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel home;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel logout;
    private javax.swing.JTable mainTable;
    // End of variables declaration//GEN-END:variables
}
